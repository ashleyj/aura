# The Mac OS X SDK version required when building the VM libs
set(MACOSX_SDK_VERSION 10.11)
# The minimum Mac OS X version needed by apps built by RoboVM
set(MACOSX_MIN_VERSION 10.7)

cmake_minimum_required(VERSION 2.8.8)
project(build)
include(CheckCCompilerFlag)
include(ExternalProject)

enable_testing()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "debug")
endif()


if(NOT OS)
  message(WARNING "OS not set, trying to determine automatically")
  IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(OS "macosx")
    SET(ARCH "x86_64")
  ENDIF()
  IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(OS "linux")
    SET(ARCH "x86_64")
  ENDIF()
  IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    SET(OS "freebsd")
    SET(ARCH "x86_64")
  ENDIF()
endif()
if(NOT OS MATCHES "^(linux|macosx|freebsd)$")
  message(FATAL_ERROR "Unsupported OS: ${OS}")
endif()
if(NOT ARCH)
  message(FATAL_ERROR "ARCH not set")
endif()
if(NOT ARCH MATCHES "^(x86_64|x86|thumbv7|arm64)$")
  message(FATAL_ERROR "Unsupported ARCH: ${ARCH}")
endif()

if(OS STREQUAL "linux")
  set(LINUX YES)
  set(OS_FAMILY linux)
elseif(OS STREQUAL "macosx")
  set(MACOSX YES)
  set(DARWIN YES)
  set(OS_FAMILY darwin)
elseif(OS STREQUAL "freebsd")
  set(FREEBSD YES)
  set(OS_FAMILY freebsd)
endif()

set(64_BIT NO)
if (ARCH STREQUAL "x86_64")
  set(X86_64 YES)
  set(64_BIT YES)
elseif (ARCH STREQUAL "x86")
  set(X86 YES)
elseif (ARCH STREQUAL "thumbv7")
  set(ARM YES)
  set(THUMB YES)
  set(THUMBV7 YES)
elseif (ARCH STREQUAL "arm64")
  set(ARM64 YES)
  set(64_BIT YES)
endif()

if(DARWIN)
  set(CARCH ${ARCH})
  if (ARCH STREQUAL "x86_64")
    set(CARCH x86_64)
  elseif (ARCH STREQUAL "x86")
    set(CARCH i386)
  elseif (ARCH STREQUAL "thumbv7")
    set(CARCH armv7)
  elseif (ARCH STREQUAL "arm64")
    set(CARCH arm64)
  endif()
endif()

if(DARWIN)
  if(NOT SYSROOT)
    exec_program(xcode-select ARGS --print-path OUTPUT_VARIABLE XCODE_PATH)
    if(MACOSX)
      set(SYSROOT "${XCODE_PATH}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MACOSX_SDK_VERSION}.sdk")
      if(NOT IS_DIRECTORY ${SYSROOT})
        message(FATAL_ERROR "Failed to locate MacOSX SDK ${MACOSX_SDK_VERSION}")
      endif()
    endif()
  endif()
endif()

# Set up global C and C++ compiler flags
set(C_FLAGS "${C_FLAGS} -std=gnu99 -fPIC")
set(CXX_FLAGS "${CXX_FLAGS} -std=gnu++11 -fPIC")
set(C_CXX_FLAGS "${C_CXX_FLAGS} -Wall -fdata-sections -ffunction-sections -fPIC")
if(CARCH)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -arch ${CARCH}")
elseif(64_BIT)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -m64")
else()
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -m32")
endif()
if (ARCH STREQUAL "thumbv6" OR ARCH STREQUAL "thumbv7")
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -mthumb")
endif()
if(SYSROOT)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -isysroot ${SYSROOT}")
  set(CMAKE_OSX_SYSROOT "${SYSROOT}")
endif()
if(MACOSX)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -mmacosx-version-min=${MACOSX_MIN_VERSION}")
endif()

# Linker flags
set(LD_FLAGS "${LD_FLAGS} -fPIC")
if(CARCH)
  set(LD_FLAGS "${LD_FLAGS} -arch ${CARCH}")
elseif(64_BIT)
  set(LD_FLAGS "${LD_FLAGS} -m64")
else()
  set(LD_FLAGS "${LD_FLAGS} -m32")
endif()
if(SYSROOT)
  set(LD_FLAGS "${LD_FLAGS} -isysroot ${SYSROOT}")
endif()
if(MACOSX)
  set(LD_FLAGS "${LD_FLAGS} -mmacosx-version-min=${MACOSX_MIN_VERSION} -Wl,-undefined -Wl,dynamic_lookup -flat_namespace")
endif()

#set(CMAKE_C_FLAGS_RELEASE "-O0 -g -pg")
#set(CMAKE_CXX_FLAGS_RELEASE "-O0 -g -pg")
set(CMAKE_C_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -DNDEBUG")

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${C_CXX_FLAGS} ${C_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${C_CXX_FLAGS} ${CXX_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${C_CXX_FLAGS} ${C_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${C_CXX_FLAGS} ${CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LD_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LD_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${LD_FLAGS}")

# Assembler flags
set(ASM_FLAGS "${ASM_FLAGS} -fPIC")
if(CARCH)
  set(ASM_FLAGS "${ASM_FLAGS} -c -arch ${CARCH}")
elseif(64_BIT)
  set(ASM_FLAGS "${ASM_FLAGS} -c -m64")
else()
  set(ASM_FLAGS "${ASM_FLAGS} -c -m32")
endif()
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(ASM_FLAGS "${ASM_FLAGS} -g")
endif()
if(MACOSX)
  set(ASM_FLAGS "${ASM_FLAGS} -mmacosx-version-min=${MACOSX_MIN_VERSION}")
endif()
set(CMAKE_ASM_COMPILE_OBJECT "${CMAKE_C_COMPILER} ${ASM_FLAGS} -o <OBJECT> <SOURCE>")
enable_language(ASM)

if(LINUX)
  add_definitions(-DLINUX)
elseif(FREEBSD)
  add_definitions(-DFREEBSD)
elseif(DARWIN)
  if(MACOSX)
    add_definitions(-DMACOSX)
  endif()
  add_definitions(-DDARWIN)
endif()

if (ARCH STREQUAL "x86_64" OR FREEBSD)
  add_definitions(-DRVM_X86_64)
elseif (ARCH STREQUAL "x86")
  add_definitions(-DRVM_X86)
elseif (ARCH STREQUAL "thumbv7")
  add_definitions(-DRVM_THUMBV7)
elseif (ARCH STREQUAL "arm64")
  add_definitions(-DRVM_ARM64)
endif()

set(LIB_SUFFIX ".so")
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(LIB_SUFFIX "-dbg.so")
endif()

if (OS STREQUAL "macosx")
    set(LIB_SUFFIX ".dylib")
    if (CMAKE_BUILD_TYPE STREQUAL "debug")
      set(LIB_SUFFIX "-dbg.dylib")
    endif()
endif()

set(INSTALL_DIR ${CMAKE_SOURCE_DIR}/target/binaries/${OS}/${ARCH})

message(STATUS "ARCH: ${ARCH}")
message(STATUS "OS: ${OS}")
message(STATUS "SYSROOT: ${SYSROOT}")
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_C_FLAGS_DEBUG: ${CMAKE_C_FLAGS_DEBUG}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
message(STATUS "CMAKE_MODULE_LINKER_FLAGS: ${CMAKE_MODULE_LINKER_FLAGS}")

# Ugly hardcoding. This is the offset in bytes of the gcDescriptor member in the Class struct from core/include/aura/types.h
# Should be the value of sizeof(void*)*3 for the target platform.
if(64_BIT)
  set(EXTGC_MARK_DESCR_OFFSET 24)
else()
  set(EXTGC_MARK_DESCR_OFFSET 12)
endif()

set(EXTGC_C_FLAGS "${C_CXX_FLAGS} -DGC_DISABLE_INCREMENTAL -DGC_DISCOVER_TASK_THREADS -DGC_FORCE_UNMAP_ON_GCOLLECT -DMARK_DESCR_OFFSET=${EXTGC_MARK_DESCR_OFFSET}")
set(EXTGC_LD_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
if(DARWIN)
  set(EXTGC_C_FLAGS "${EXTGC_C_FLAGS}")
endif()
set(EXTGC_PARAMS  "--enable-static=no --enable-munmap=1 --enable-parallel-mark=yes")
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(EXTGC_C_FLAGS "${EXTGC_C_FLAGS} -g")
  set(EXTGC_PARAMS "${EXTGC_PARAMS} --enable-gc-debug=yes")
endif()
ExternalProject_Add(libatomic_ops 
  DOWNLOAD_COMMAND cp -r ${CMAKE_SOURCE_DIR}/libatomic_ops ${CMAKE_BINARY_DIR}/libatomic_ops-prefix/src
  UPDATE_COMMAND ""
  CONFIGURE_COMMAND "" 
  BUILD_COMMAND ""
  INSTALL_COMMAND ""
  BUILD_IN_SOURCE 1
)
ExternalProject_Add(extgc 
  DEPENDS libatomic_ops
  DOWNLOAD_COMMAND cp -r ${CMAKE_SOURCE_DIR}/extgc ${CMAKE_BINARY_DIR}/extgc-prefix/src
  UPDATE_COMMAND ""
  PATCH_COMMAND bash -c "rm -rf libatomic_ops && ln -s ../../../libatomic_ops-prefix/src/libatomic_ops libatomic_ops"
  CONFIGURE_COMMAND bash -c "CC=${CMAKE_C_COMPILER} CFLAGS='${EXTGC_C_FLAGS}' LDFLAGS='${EXTGC_LD_FLAGS}' ./configure ${EXT_HOST} ${EXTGC_PARAMS} --prefix=${CMAKE_BINARY_DIR}/gc"
  BUILD_IN_SOURCE 1
)
if(OS STREQUAL "macosx")
    install(FILES ${CMAKE_BINARY_DIR}/gc/lib/libgc.1.dylib ${CMAKE_BINARY_DIR}/gc/lib/libgc.dylib DESTINATION ${INSTALL_DIR})
else()
    install(FILES ${CMAKE_BINARY_DIR}/gc/lib/libgc.so.1 ${CMAKE_BINARY_DIR}/gc/lib/libgc.so DESTINATION ${INSTALL_DIR})
endif()

add_subdirectory(core/src)
add_subdirectory(debug/src)
add_subdirectory(bc/src)
add_subdirectory(rt)
